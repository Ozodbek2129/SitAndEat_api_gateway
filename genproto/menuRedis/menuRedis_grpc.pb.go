// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: menuRedis.proto

package menuRedis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Menu_CretaeMeal_FullMethodName = "/menuRedis.Menu/CretaeMeal"
	Menu_GetMeals_FullMethodName   = "/menuRedis.Menu/GetMeals"
	Menu_UpdateMeal_FullMethodName = "/menuRedis.Menu/UpdateMeal"
	Menu_DeleteMeal_FullMethodName = "/menuRedis.Menu/DeleteMeal"
)

// MenuClient is the client API for Menu service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuClient interface {
	CretaeMeal(ctx context.Context, in *MealCreate, opts ...grpc.CallOption) (*Status, error)
	GetMeals(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Meals, error)
	UpdateMeal(ctx context.Context, in *MealCreate, opts ...grpc.CallOption) (*Status, error)
	DeleteMeal(ctx context.Context, in *MealDelete, opts ...grpc.CallOption) (*Status, error)
}

type menuClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuClient(cc grpc.ClientConnInterface) MenuClient {
	return &menuClient{cc}
}

func (c *menuClient) CretaeMeal(ctx context.Context, in *MealCreate, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Menu_CretaeMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) GetMeals(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Meals, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Meals)
	err := c.cc.Invoke(ctx, Menu_GetMeals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) UpdateMeal(ctx context.Context, in *MealCreate, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Menu_UpdateMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuClient) DeleteMeal(ctx context.Context, in *MealDelete, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Menu_DeleteMeal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuServer is the server API for Menu service.
// All implementations must embed UnimplementedMenuServer
// for forward compatibility
type MenuServer interface {
	CretaeMeal(context.Context, *MealCreate) (*Status, error)
	GetMeals(context.Context, *Void) (*Meals, error)
	UpdateMeal(context.Context, *MealCreate) (*Status, error)
	DeleteMeal(context.Context, *MealDelete) (*Status, error)
	mustEmbedUnimplementedMenuServer()
}

// UnimplementedMenuServer must be embedded to have forward compatible implementations.
type UnimplementedMenuServer struct {
}

func (UnimplementedMenuServer) CretaeMeal(context.Context, *MealCreate) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CretaeMeal not implemented")
}
func (UnimplementedMenuServer) GetMeals(context.Context, *Void) (*Meals, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMeals not implemented")
}
func (UnimplementedMenuServer) UpdateMeal(context.Context, *MealCreate) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeal not implemented")
}
func (UnimplementedMenuServer) DeleteMeal(context.Context, *MealDelete) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMeal not implemented")
}
func (UnimplementedMenuServer) mustEmbedUnimplementedMenuServer() {}

// UnsafeMenuServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuServer will
// result in compilation errors.
type UnsafeMenuServer interface {
	mustEmbedUnimplementedMenuServer()
}

func RegisterMenuServer(s grpc.ServiceRegistrar, srv MenuServer) {
	s.RegisterService(&Menu_ServiceDesc, srv)
}

func _Menu_CretaeMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MealCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).CretaeMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menu_CretaeMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).CretaeMeal(ctx, req.(*MealCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_GetMeals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).GetMeals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menu_GetMeals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).GetMeals(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_UpdateMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MealCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).UpdateMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menu_UpdateMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).UpdateMeal(ctx, req.(*MealCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Menu_DeleteMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MealDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuServer).DeleteMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Menu_DeleteMeal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuServer).DeleteMeal(ctx, req.(*MealDelete))
	}
	return interceptor(ctx, in, info, handler)
}

// Menu_ServiceDesc is the grpc.ServiceDesc for Menu service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Menu_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "menuRedis.Menu",
	HandlerType: (*MenuServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CretaeMeal",
			Handler:    _Menu_CretaeMeal_Handler,
		},
		{
			MethodName: "GetMeals",
			Handler:    _Menu_GetMeals_Handler,
		},
		{
			MethodName: "UpdateMeal",
			Handler:    _Menu_UpdateMeal_Handler,
		},
		{
			MethodName: "DeleteMeal",
			Handler:    _Menu_DeleteMeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "menuRedis.proto",
}
