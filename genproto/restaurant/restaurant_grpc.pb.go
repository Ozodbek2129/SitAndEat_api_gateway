// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: restaurant.proto

package restaurant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RestaurantClient is the client API for Restaurant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestaurantClient interface {
	CreateRestaurant(ctx context.Context, in *Restuarant, opts ...grpc.CallOption) (*Status, error)
	GetAllRestaurants(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Restuanants, error)
	GetRestuarant(ctx context.Context, in *RestuanantId, opts ...grpc.CallOption) (*GetRes, error)
	UpdateRestuarant(ctx context.Context, in *RestuarantUpdate, opts ...grpc.CallOption) (*Status, error)
	DeleteRestuarant(ctx context.Context, in *RestuanantId, opts ...grpc.CallOption) (*Status, error)
}

type restaurantClient struct {
	cc grpc.ClientConnInterface
}

func NewRestaurantClient(cc grpc.ClientConnInterface) RestaurantClient {
	return &restaurantClient{cc}
}

func (c *restaurantClient) CreateRestaurant(ctx context.Context, in *Restuarant, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/restaurant.restaurant/CreateRestaurant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantClient) GetAllRestaurants(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Restuanants, error) {
	out := new(Restuanants)
	err := c.cc.Invoke(ctx, "/restaurant.restaurant/GetAllRestaurants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantClient) GetRestuarant(ctx context.Context, in *RestuanantId, opts ...grpc.CallOption) (*GetRes, error) {
	out := new(GetRes)
	err := c.cc.Invoke(ctx, "/restaurant.restaurant/GetRestuarant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantClient) UpdateRestuarant(ctx context.Context, in *RestuarantUpdate, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/restaurant.restaurant/UpdateRestuarant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *restaurantClient) DeleteRestuarant(ctx context.Context, in *RestuanantId, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/restaurant.restaurant/DeleteRestuarant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RestaurantServer is the server API for Restaurant service.
// All implementations must embed UnimplementedRestaurantServer
// for forward compatibility
type RestaurantServer interface {
	CreateRestaurant(context.Context, *Restuarant) (*Status, error)
	GetAllRestaurants(context.Context, *Filter) (*Restuanants, error)
	GetRestuarant(context.Context, *RestuanantId) (*GetRes, error)
	UpdateRestuarant(context.Context, *RestuarantUpdate) (*Status, error)
	DeleteRestuarant(context.Context, *RestuanantId) (*Status, error)
	mustEmbedUnimplementedRestaurantServer()
}

// UnimplementedRestaurantServer must be embedded to have forward compatible implementations.
type UnimplementedRestaurantServer struct {
}

func (UnimplementedRestaurantServer) CreateRestaurant(context.Context, *Restuarant) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestaurant not implemented")
}
func (UnimplementedRestaurantServer) GetAllRestaurants(context.Context, *Filter) (*Restuanants, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRestaurants not implemented")
}
func (UnimplementedRestaurantServer) GetRestuarant(context.Context, *RestuanantId) (*GetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestuarant not implemented")
}
func (UnimplementedRestaurantServer) UpdateRestuarant(context.Context, *RestuarantUpdate) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestuarant not implemented")
}
func (UnimplementedRestaurantServer) DeleteRestuarant(context.Context, *RestuanantId) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRestuarant not implemented")
}
func (UnimplementedRestaurantServer) mustEmbedUnimplementedRestaurantServer() {}

// UnsafeRestaurantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestaurantServer will
// result in compilation errors.
type UnsafeRestaurantServer interface {
	mustEmbedUnimplementedRestaurantServer()
}

func RegisterRestaurantServer(s grpc.ServiceRegistrar, srv RestaurantServer) {
	s.RegisterService(&Restaurant_ServiceDesc, srv)
}

func _Restaurant_CreateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Restuarant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServer).CreateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.restaurant/CreateRestaurant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServer).CreateRestaurant(ctx, req.(*Restuarant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restaurant_GetAllRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServer).GetAllRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.restaurant/GetAllRestaurants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServer).GetAllRestaurants(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restaurant_GetRestuarant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestuanantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServer).GetRestuarant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.restaurant/GetRestuarant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServer).GetRestuarant(ctx, req.(*RestuanantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restaurant_UpdateRestuarant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestuarantUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServer).UpdateRestuarant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.restaurant/UpdateRestuarant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServer).UpdateRestuarant(ctx, req.(*RestuarantUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Restaurant_DeleteRestuarant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestuanantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RestaurantServer).DeleteRestuarant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restaurant.restaurant/DeleteRestuarant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RestaurantServer).DeleteRestuarant(ctx, req.(*RestuanantId))
	}
	return interceptor(ctx, in, info, handler)
}

// Restaurant_ServiceDesc is the grpc.ServiceDesc for Restaurant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Restaurant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "restaurant.restaurant",
	HandlerType: (*RestaurantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRestaurant",
			Handler:    _Restaurant_CreateRestaurant_Handler,
		},
		{
			MethodName: "GetAllRestaurants",
			Handler:    _Restaurant_GetAllRestaurants_Handler,
		},
		{
			MethodName: "GetRestuarant",
			Handler:    _Restaurant_GetRestuarant_Handler,
		},
		{
			MethodName: "UpdateRestuarant",
			Handler:    _Restaurant_UpdateRestuarant_Handler,
		},
		{
			MethodName: "DeleteRestuarant",
			Handler:    _Restaurant_DeleteRestuarant_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "restaurant.proto",
}
